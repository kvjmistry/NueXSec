#include "filters.fcl"
process_name: Filter1
services:
{
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
}

#source is now a root file
source:
{
  module_type: RootInput
  #maxEvents:  10        # Number of events to create
  #inputCommands: [ "keep *", "drop sumdata::RunData_*_*_*" ]
}
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "nuexsec_data_filtered.root" #default file name, can override from command line with -o or --output
   SelectEvents:[reco]
   fastCloning: true
   dataTier: "reconstructed"
 }
}
# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 filters:
 {
  filter:  @local::evtfilter
 }
 
#define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ filter ] 

 # define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]
 
 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [ reco ] 
 
 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [ stream1 ]  
}

physics.filters.filter.EventList: "run1_run_subrun_list_data.txt"
physics.filters.filter.Selection: 1

